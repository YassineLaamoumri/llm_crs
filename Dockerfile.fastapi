# Stage 1: Build environment
FROM ghcr.io/astral-sh/uv:python3.13-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy
ENV UV_PYTHON_DOWNLOADS=0
WORKDIR /app

# Install build tools and a modern C++ compiler (e.g., g++)
RUN apt-get update && \
    apt-get install -y build-essential g++ && \
    apt-get clean

# Copy dependency files for installation
COPY pyproject.toml uv.lock ./

# Install dependencies (cached)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project --no-dev

# Copy application code
COPY . .

# Install all dependencies including the project package
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Stage 2: Runtime environment
FROM python:3.13-slim-bookworm

# Create app user for security
RUN groupadd -r app && useradd -r -g app app
WORKDIR /app

# Copy application from builder
COPY --from=builder --chown=app:app /app /app

# Create a startup script that ensures permissions are correct
RUN echo '#!/bin/bash\n\
mkdir -p /app/data /app/chroma_db\n\
touch /app/data/database.db 2>/dev/null || true\n\
chmod -R 777 /app/data /app/chroma_db\n\
exec "$@"' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Set PATH to use the virtual environment binaries
ENV PATH="/app/.venv/bin:$PATH"

# Expose the FastAPI port
EXPOSE 8000

# Use the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["/app/.venv/bin/fastapi", "run", "/app/fastapi_app/main.py", "--port", "8000", "--host", "0.0.0.0"]
